# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DZYiP4IU0_1F5Bys_vfOAq0iqVIKnv1I
"""

! pip install kaggle

# configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# API to fetch the data set from kaggle
!kaggle datasets download -d kazanova/sentiment140

# extracting the compressed dataset

from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in English
print(stopwords.words('english'))

# loading the data from csv file to pandas dataframe
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding = 'ISO-8859-1')

# checkin gthe number of rows and columns
twitter_data.shape

#print first 5 rows
twitter_data.head()

# naming the columns and reading the dataset again

column_names = ['target', 'id', 'date', 'flag', 'user', 'text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=column_names, encoding = 'ISO-8859-1')

# checkin gthe number of rows and columns
twitter_data.shape

# checkin gthe number of rows and columns
twitter_data.shape

# counting the number of missing values in the dataset
twitter_data.isnull().sum()

# checking the distribution of target column
twitter_data['target']. value_counts ()

twitter_data.replace({'target':{4:1}}, inplace=True)

# checking the distribution of target column
twitter_data['target']. value_counts ()

"""0--> negative Tweet
1-->Positive Tweet

Stemming is the process of reducing a word to its key word

example-actress, acting, actor-->act
"""

port_stem = PorterStemmer()

def stemming(content):

  stemmed_content = re.sub('[^a-zA-Z]',' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english') ]
  stemmed_content = ''.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

# separating the data and label
X = twitter_data['stemmed_content']. values
Y = twitter_data['target']. values

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)

print(X_test)

# converting the textual data to numerical data

vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Training the Machine learning Model

Logestic Regression
"""

model = LogisticRegression(max_iter=1000)

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score on the training data :', training_data_accuracy)

"""# Saving the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model, open(filename, 'wb'))

"""*Load* the saved model for future prediction"""

# loading the saved model
loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

import matplotlib.pyplot as plt

actual_labels = []
predicted_labels = []

while True:
    try:
        a = input("Enter the index of the test data you want to predict (or type 'exit' to quit): ")
        if a.lower() == "exit":
            print("Exiting...")
            break
        a = int(a)
        X_new = X_test[a]
        actual_label = Y_test[a]
        actual_labels.append(actual_label)
        print("Actual label:", actual_label)
        prediction = model.predict(X_new.reshape(1, -1))
        predicted_labels.append(prediction[0])
        print("Predicted label:", prediction)

        if prediction[0] == 0:
            print('\033[91m' + 'Negative Tweet')
        else:
            print('\033[92m' + 'Positive Tweet')

    except ValueError:
        print("Please enter a valid integer index or type 'exit' to quit.")
    except IndexError:
        print("Index out of range. Please enter a valid index.")
    except Exception as e:
        print("An error occurred:", e)

# Plot the actual vs predicted labels
plt.figure(figsize=(12, 6))

plt.plot(actual_labels, label='Actual Labels', color='blue', marker='o')
plt.plot(predicted_labels, label='Predicted Labels', color='orange', linestyle='dashed', marker='x')

plt.title("Actual vs. Predicted Labels")
plt.xlabel("Index")
plt.ylabel("Label")
plt.legend()

plt.grid(True, linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

from google.colab import drive
drive.mount('/content/drive')